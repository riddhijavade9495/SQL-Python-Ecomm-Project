import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import mysql.connector
import numpy as np

# Intermediate Queries
# Connect to the MySQL database
db = mysql.connector.connect(
    host='localhost',
    user='root',
    password='Mysql123',
    database='ecommerce'
)
cur = db.cursor()

#1. Calculate the number of orders per month in 2018.
query = """select monthname(order_purchase_timestamp) months,count(order_id) from ecommerce.orders where year(order_purchase_timestamp) = 2018 group by months"""
cur.execute(query)                                             
data = cur.fetchall()
df = pd.DataFrame(data,columns = ["months","order_count"])
o = ["January","February","March","April","May","June","July","August","September","October","November","December"]
#ax = sns.barplot(x = df["months"],y = df["order_count"], data = df, order = o)
#plt.xticks(rotation = 45)
#ax.bar_label(ax.containers[0])
#plt.title("Count of Orders")
#plt.show()
#print(df)
#2. Find the average number of products per order, grouped by customer city.
query = """
SELECT 
    AVG(order_item_count) AS avg_products_per_order,
	customer_city
FROM (
    SELECT 
        o.order_id,
        c.customer_city as customer_city,
        COUNT(oi.order_item_id) AS order_item_count
    FROM 
        ecommerce.orders as o
    JOIN 
        ecommerce.order_items as oi ON o.order_id = oi.order_id
    JOIN 
        ecommerce.customers as c ON o.customer_id = c.customer_id
    GROUP BY 
        o.order_id, c.customer_city
) AS order_counts
GROUP BY 
    customer_city;
"""
cur.execute(query)
data = cur.fetchall()
#df = pd.DataFrame(data,columns = ["average","customer_city"])
#print(df)
#3. Calculate the percentage of total revenue contributed by each product category.
query = """
SELECT 
products.product_category as category,
(sum(order_items.price + order_items.freight_value) / (select
sum(oi.price + oi.freight_value) as subtotal
FROM ecommerce.order_items as oi)  * 100) as total
FROM ecommerce.order_items as order_items
join ecommerce.products as products
on order_items.product_id = products.product_id
GROUP BY 
    products.product_category
"""
cur.execute(query)                                                                                                                                               
data = cur.fetchall()
#df = pd.DataFrame(data,columns = ["category","total"])
#print(df)

#4. Identify the correlation between product price and the number of times a product has been purchased.
query = """
SELECT 
products.product_category,
count(order_items.product_id),
round(avg(order_items.price),2)
from products join order_items
on products.product_id = order_items.product_id
group by products.product_category
"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data,columns = ["category","order_count","price"])
arr1 = df["order_count"]
arr2 = df["price"]
#print(np.corrcoef([arr1, arr2]))

#5. Calculate the total revenue generated by each seller, and rank them by revenue.
query = """
SELECT *, dense_rank() over(order by revenue desc) as rn from
(select order_items.seller_id, sum(payments.payment_value)
revenue from order_items join payments
on order_items.order_id = payments.order_id
group by order_items.seller_id) as a
"""
cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data,columns = ["seller_id","revenue","rank"])
df = df.head()
sns.barplot(x="seller_id", y = "revenue", data = df)
plt.xticks(rotation = 90)
plt.show()
